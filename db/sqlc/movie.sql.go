// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.19.0
// source: movie.sql

package sqlc

import (
	"context"
	"database/sql"
)

const createMovie = `-- name: CreateMovie :one
INSERT INTO movies (
  title, genre
) VALUES (
  $1, $2
)
RETURNING id, title, genre, created_at
`

type CreateMovieParams struct {
	Title sql.NullString `json:"title"`
	Genre sql.NullString `json:"genre"`
}

func (q *Queries) CreateMovie(ctx context.Context, arg CreateMovieParams) (Movie, error) {
	row := q.db.QueryRowContext(ctx, createMovie, arg.Title, arg.Genre)
	var i Movie
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Genre,
		&i.CreatedAt,
	)
	return i, err
}

const deleteAuthor = `-- name: DeleteAuthor :exec
DELETE FROM movies
WHERE id = $1
`

func (q *Queries) DeleteAuthor(ctx context.Context, id int32) error {
	_, err := q.db.ExecContext(ctx, deleteAuthor, id)
	return err
}

const getMovie = `-- name: GetMovie :one
SELECT id, title, genre, created_at FROM movies
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetMovie(ctx context.Context, id int32) (Movie, error) {
	row := q.db.QueryRowContext(ctx, getMovie, id)
	var i Movie
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Genre,
		&i.CreatedAt,
	)
	return i, err
}

const getMovies = `-- name: GetMovies :many
SELECT id, title, genre, created_at FROM movies
ORDER BY title
`

func (q *Queries) GetMovies(ctx context.Context) ([]Movie, error) {
	rows, err := q.db.QueryContext(ctx, getMovies)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Movie
	for rows.Next() {
		var i Movie
		if err := rows.Scan(
			&i.ID,
			&i.Title,
			&i.Genre,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
